#!/bin/bash
INDENT_WIDTH=2

## Common
get_head_branch () {
    local head_branch=$(git symbolic-ref -q --short HEAD)
    if [ -z "$head_branch" ]; then
        local prehash=$(git rev-parse --short HEAD)
        echo "$prehash"
        return 1
    fi
    echo "$head_branch"
}
# $1 : Branch.
get_remote_name () {
    local branch=$1
    # The remote name of this branch (e.g. origin).
    local remote_name=$(git config branch."${branch}".remote)
    if [ -z "$remote_name" ]; then
        echo 'no remote repository'
        return 1
    fi
    echo "$remote_name"
}
is_git_dir() {
    if [ "$(git rev-parse --is-inside-work-tree 2> /dev/null)" != 'true' ]; then
        echo "Not git directory." 1>&2
        return 1
    fi
    return 0
}
# $1 : The directory path.
cd_git_toplevel() {
    cd "$1"
    is_git_dir || return 1
    cd "$(git rev-parse --show-toplevel)"
}
# $1 : Indent level.
print_indent() {
    local level=${1:-0}
    if [ "$level" -eq 0 ]; then
        return
    fi
    local i
    for i in $(seq 1 $(($level * $INDENT_WIDTH))); do
            echo -n " "
    done
}
# $1 : The executing command.
# $2 : Indent level.
exec_cmd_in_submodules() {
    local cmd="$1" indent_level="${2:-1}" output IFS_SAVE is_error
    local -a submodule_dirs
    IFS_SAVE=$IFS
    IFS=$'\n'
    submodule_dirs=($(git submodule 2> /dev/null | sed 's/^ *//g' | cut -d ' ' -f 2 | sed 's/(.*)$//'))
    IFS=$IFS_SAVE
    if [ -z "$submodule_dirs" ]; then
        return 0
    fi
    for sub_dir in "${submodule_dirs[@]}"; do
        (
            cd "$sub_dir" || continue
            IFS_SAVE=$IFS
            IFS=$'\n'
            output=($("$cmd" "$sub_dir"))
            is_error=$?
            IFS=$IFS_SAVE
            for line in "${output[@]}"; do
                print_indent "$indent_level"
                echo -e "$line"
            done
            if [ $is_error -eq 0 -a -e .git ]; then
                exec_cmd_in_submodules "$cmd" "$(($indent_level + 1))"
            fi
        )
    done
}
# $1 : The executing command.
# $@ : Directories.
exec_cmd_in_dir() {
    local cmd=$1
    shift
    local indent_level=0
    local dir
    for dir in "$@"; do
        is_dir "$dir" || continue
        (
            cd "$dir"
            is_git_dir 2> /dev/null || continue
            if [ "$(pwd -P)" != "$(git rev-parse --show-toplevel)" ]; then
                continue
            fi
            "$cmd" "$dir" || continue
            exec_cmd_in_submodules "$cmd" "$(($indent_level + 1))"
        )
    done
}
# $1 : The directory path.
is_dir() {
    local dir=$1
    if [ ! -e "$dir" ]; then
        echo -e "\033[0;31mDirectory not found!! : $dir\033[0;39m"
        return 1
    elif [ ! -d "$dir" ]; then
        return 1
    fi
    return 0
}
### For check_remote_in_dir.
# $1 : The directory path.
check_remote_in_dir() {
    local dir=${1%/}
    if [ "${dir}" == "." ]; then
        dir=$(pwd| sed 's/.*[\//\]//g')
    fi

    local status
    local branch
    local remote_name
    local merge_branch
    local url

    if [ ! -e .git ]; then
        status='not init'
    else
        branch=$(get_head_branch)
        if [ $? -eq 0 ]; then
            remote_name=$(get_remote_name "$branch")
            if [ $? -eq 1 ]; then
                remote_name=origin
            fi
            merge_branch=$(git config branch."${branch}".merge | sed 's%^refs/heads/%%')
            if [ "${merge_branch}" == "" ]; then
                merge_branch=${branch}
            fi
            local remote_show
            remote_show=$(git remote show "$remote_name")
            url=$(echo "$remote_show" | grep '^ *Push' | sed 's/^.*URL: \(.*\)$/\1/')
            echo -e "$url [$branch]"
            git fetch $remote_name > /dev/null 2>&1
            local behind_ahead=$(git rev-list --left-right --count "$remote_name/$merge_branch"...$branch)
            local behind=$(echo "$behind_ahead" | awk '{print $1}')
            local ahead=$(echo "$behind_ahead" | awk '{print $2}')
            printf "\e[37;42;1mリモートリポジトリの変更(behind:$behind)\e[m\n"
            if [ "$behind" -gt 0 ]; then
                echo ""
                git log \
                    --graph \
                    --pretty=format:'%Cred%h%Creset %Cgreen[%cd]%Creset%C(bold blue)[%an]%Creset -%C(yellow)%d%Creset %s' \
                    --abbrev-commit \
                    --date=format:'%Y-%m-%d %H:%M:%S' \
                    --stat \
                    $remote_name/$branch -$behind
                echo
                #echo "----------------------------------------------------------------------------------"
            fi

            printf "\e[37;41;1mローカルリポジトリの変更(ahead:$ahead)\e[m\n"
            if [ "$ahead" -gt 0 ]; then
                git log \
                    --graph \
                    --pretty=format:'%Cred%h%Creset %Cgreen[%cd]%Creset%C(bold blue)[%an]%Creset -%C(yellow)%d%Creset %s' \
                    --abbrev-commit \
                    --date=format:'%Y-%m-%d %H:%M:%S' \
                    --stat \
                    $branch -$ahead
                echo
            fi
        fi
    fi
}


### For check_status.
# $1 : The directory path.
# $2 : Indent level.
check_status_in_dir() {
    local dir="$1"
    if [ ! -e .git ]; then
        echo -e "[$dir] \033[0;31mError: not init\033[0;39m"
        return 1
    fi

    diff_result_wc=$(git diff --cached HEAD --stat| wc -l| sed 's/[ ]//g')
    printf "\e[33;44;1mコミットの変更(${diff_result_wc})\e[m\n"
    if [ "${diff_result_wc}" -gt 1 ]; then
        git diff --cached HEAD --stat
        echo ""
    fi

    diff_result_wc=$(git diff --stat| wc -l| sed 's/[ ]//g')
    printf "\e[37;46;1m未ステージの変更($(git diff --stat| wc -l| sed 's/[ ]//g'))\e[m\n"
    if [ "${diff_result_wc}" -gt 1 ]; then
        git diff --stat
        echo ""
    fi
}


### Main ###
main() {
if [ $# -eq 0 ]; then
  # Check current directory.
  cd_git_toplevel '.' || return 1
  set '.'
fi
exec_cmd_in_dir 'check_remote_in_dir' "$@"
exec_cmd_in_dir 'check_status_in_dir' "$@"
}

main "$@"

